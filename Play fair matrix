#include <stdio.h>
#include <string.h>
#include <ctype.h>
void prepareKeyword(char keyword[], char cleanedKeyword[]) {
    int len = strlen(keyword);
    int index = 0;
    int i;
    int j;
    int k;
    for (i = 0; i < len; i++) {
        if (!isalpha(keyword[i]))
            continue;
        
        cleanedKeyword[index] = toupper(keyword[i]);
        index++;
    }
    cleanedKeyword[index] = '\0';

    for (i = 0; i < index; i++) {
        for (j = i + 1; j < index; j++) {
            if (cleanedKeyword[i] == cleanedKeyword[j]) {
                for (k = j; k < index; k++) {
                    cleanedKeyword[k] = cleanedKeyword[k + 1];
                }
                index--;
                j--;
            }
        }
    }
}
void fillMatrix(char keyword[], char matrix[5][5]) {
    char cleanedKeyword[26];
    prepareKeyword(keyword, cleanedKeyword);
    int len = strlen(cleanedKeyword);
    int index = 0;
    int i;
    int used[26] = {0};
    for (i = 0; i < 26; i++) {
        used[i] = 0;
    }
    for (i = 0; i < len; i++) {
        int pos = cleanedKeyword[i] - 'A';
        if (!used[pos]) {
            matrix[index / 5][index % 5] = cleanedKeyword[i];
            used[pos] = 1;
            index++;
        }
    }
    for (i = 0; i < 26; i++) {
        if (!used[i] && (i != ('J' - 'A'))) {
            matrix[index / 5][index % 5] = 'A' + i;
            index++;
        }
    }
}
void findCharPosition(char matrix[5][5], char ch, int *row, int *col) {
    if (ch == 'J') ch = 'I';
    int i;
    int j;
    int k;
    for (i = 0; i < 5; i++) {
        for (j = 0; j < 5; j++) {
            if (matrix[i][j] == ch) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}
void encryptPair(char matrix[5][5], char first, char second, char *result1, char *result2) {
    int row1, col1, row2, col2;
    findCharPosition(matrix, first, &row1, &col1);
    findCharPosition(matrix, second, &row2, &col2);
    if (row1 == row2) {
        *result1 = matrix[row1][(col1 + 1) % 5];
        *result2 = matrix[row2][(col2 + 1) % 5];
    } else if (col1 == col2) {
        *result1 = matrix[(row1 + 1) % 5][col1];
        *result2 = matrix[(row2 + 1) % 5][col2];
    } else {
        *result1 = matrix[row1][col2];
        *result2 = matrix[row2][col1];
    }
}
int main() {
    char keyword[100];
    char plaintext[100];
    char matrix[5][5];

    printf("Enter the keyword: ");
    gets(keyword);
    printf("Enter the plaintext (in uppercase, no spaces): ");
    gets(plaintext);

    fillMatrix(keyword, matrix);

    int len = strlen(plaintext);
    if (len % 2 == 1) {
        plaintext[len] = 'X';
        plaintext[len + 1] = '\0';
        len++;
    }

    char ciphertext[100];
    int i;
    int j;
    int k;
    for (i = 0; i < len; i += 2) {
        char first = plaintext[i];
        char second = plaintext[i + 1];
        char result1, result2;
        encryptPair(matrix, first, second, &result1, &result2);
        ciphertext[i] = result1;
        ciphertext[i + 1] = result2;
    }
    ciphertext[len] = '\0';

    printf("Encrypted text: %s\n", ciphertext);

    return 0;
}
