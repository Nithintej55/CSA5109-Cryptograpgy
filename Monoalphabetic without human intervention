#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <stdlib.h>

const char* english_frequencies = "ETAOINSHRDLCUMWFGYPBVKJXQZ";

float calculate_likelihood(char text[]) {
    int counts[26] = {0};
    int text_length = strlen(text);
    int total_letters = 0;

    for (int i = 0; i < text_length; i++) {
        if (isalpha(text[i])) {
            char letter = tolower(text[i]);
            counts[letter - 'a']++;
            total_letters++;
        }
    }

    float likelihood = 0;
    for (int i = 0; i < 26; i++) {
        char target_letter = english_frequencies[i];
        likelihood += (float)counts[target_letter - 'a'] / total_letters;
    }

    return likelihood;
}

void decrypt_monoalphabetic_substitution(char text[], char key[]) {
    int text_length = strlen(text);

    for (int i = 0; i < text_length; i++) {
        if (isalpha(text[i])) {
            char base = islower(text[i]) ? 'a' : 'A';
            text[i] = key[tolower(text[i]) - 'a'] + (base - 'a');
        }
    }
}

int main() {
    char ciphertext[] = "VTKDU MMRWV ARFLY WJKMR VTVFZ BKBKL QLTHJ TZVTL VUVYJ WFLRY ARFLY MMRWV ARFLY MMRWV KMPJJ TZVTL QRZZW FLRKO SRKSY";

    int num_top_plaintexts = 10; 
    char key[26];

    printf("Top %d possible plaintexts by likelihood:\n", num_top_plaintexts);

    for (int i = 0; i < 26; i++) {
        key[i] = 'a' + i;
    }
    for (int attempt = 0; attempt < num_top_plaintexts; attempt++) {
        float best_likelihood = 0;
        char best_plaintext[1000];
        char best_key[26];

        char plaintext[1000];
        strcpy(plaintext, ciphertext);
        decrypt_monoalphabetic_substitution(plaintext, key);

        float likelihood = calculate_likelihood(plaintext);

        if (likelihood > best_likelihood) {
            best_likelihood = likelihood;
            strcpy(best_plaintext, plaintext);
            strcpy(best_key, key);
        }

        if (next_permutation(key)) {
    
            printf("Plaintext: %s (Likelihood: %f)\n", best_plaintext, best_likelihood);
        } else {
            break; 
        }
    }

    return 0;
}

int next_permutation(char* s) {
    int i, j, n;
    n = strlen(s);
    for (i = n - 2; i >= 0 && s[i] >= s[i + 1]; i--);

    if (i == -1)
        return 0;

    for (j = n - 1; j > i && s[j] <= s[i]; j--);

    char temp = s[i];
    s[i] = s[j];
    s[j] = temp;

    for (int a = i + 1, b = n - 1; a < b; a++, b--) {
        temp = s[a];
        s[a] = s[b];
        s[b] = temp;
    }

    return 1;
}
